import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import java.util.*;

public class DungeonXMLHandler extends DefaultHandler {
    // the two lines that follow declare a DEBUG flag to control
    // debug print statements and to allow the class to be easily
    // printed out.  These are not necessary for the parser.
    private static final int DEBUG = 1;
    private static final String CLASSID = "DungeonXMLHandler";

    // data can be called anything, but it is the variables that
    // contains information found while parsing the xml file
    private StringBuilder data = null;

    // When the parser parses the file it will add references to
    // Student objects to this array so that it has a list of
    // all specified students.  Had we covered containers at the
    // time I put this file on the web page I would have made this
    // an ArrayList of Students (ArrayList<Student>) and not needed
    // to keep tract of the length and maxStudents.  You should use
    // an ArrayList in your project.
    private Displayable[] dis_object;
    private int max_objects = 0;
    private int obj_Count = 0;


    // The XML file contains a list of Students, and within each
    // Student a list of activities (clubs and classes) that the
    // student participates in.  When the XML file initially
    // defines a student, many of the fields of the object have
    // not been filled in.  Additional lines in the XML file
    // give the values of the fields.  Having access to the
    // current Student and Activity allows setters on those
    // objects to be called to initialize those fields.
    private Displayable displayableBeingParsed = null;
    private Dungeon dungeonBeingParsed = null;
    private Room roomBeingParsed = null;
    private Passage passageBeingParsed = null;
    private Item itemBeingParsed = null;
    private Monster monsterBeingParsed = null;
    private Player playerBeingParsed = null;

    // The bX fields here indicate that at corresponding field is
    // having a value defined in the XML file.  In particular, a
    // line in the xml file might be:
    // <instructor>Brook Parke</instructor>
    // The startElement method (below) is called when <instructor>
    // is seen, and there we would set bInstructor.  The endElement
    // method (below) is called when </instructor> is found, and
    // in that code we check if bInstructor is set.  If it is,
    // we can extract a string representing the instructor name
    // from the data variable above.
    private boolean bheight = false;
    private boolean bhp = false;
    private boolean bhpMoves = false;
    private boolean bmaxhit = false;
    private boolean btype = false;
    private boolean bIntValue = false;
    private boolean bPosX = false;
    private boolean bPosY = false;
    private boolean bvisible = false;
    private boolean bwidth = false;
    private boolean bInvisible = false;


    // Used by code outside the class to get the list of Student objects
    // that have been constructed.
    public Displayable[] getDis_objects() {
        return dis_object;
    }

    // A constructor for this class.  It makes an implicit call to the
    // DefaultHandler zero arg constructor, which does the real work
    // DefaultHandler is defined in org.xml.sax.helpers.DefaultHandler;
    // imported above, and we don't need to write it.  We get its
    // functionality by deriving from it!
    public DungeonXMLHandler() {
    }

    // startElement is called when a <some element> is called as part of
    // <some element> ... </some element> start and end tags.
    // Rather than explain everything, look at the xml file in one screen
    // and the code below in another, and see how the different xml elements
    // are handled.
    @Override
    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

        if (DEBUG > 1) {
            System.out.println(CLASSID + ".startElement qName: " + qName);
        }
        if (qName.equalsIgnoreCase("Dungeon"))
        {
            max_objects += 1;
            dis_object = new Displayable[max_objects];
            String name = attributes.getValue("name");
            int width = Integer.parseInt(attributes.getValue("width"));
            int gameheight = Integer.parseInt(attributes.getValue("gameheight"));
            dungeonBeingParsed = new Dungeon(name,width,gameheight));
            displayableBeingParsed.addDisplayable(dungeonBeingParsed);
        }
        else if (qName.equalsIgnoreCase("Room"))
        {
            String name = attributes.getValue("name");
            roomBeingParsed = new Room(name);
            displayableBeingParsed.addDisplayable(roomBeingParsed);
        }
        else if (qName.equalsIgnoreCase("Passage"))
        {
            passageBeingParsed = new Passage();
            displayableBeingParsed.addDisplayable(passageBeingParsed);
        }
        else if (qName.equalsIgnoreCase("Item"))
        {
            String type = attributes.getValue("type");
            Item item = null;
            switch (type) {
                case "Armor":
                    item = new Armor();
                    break;
                case "Sword":
                    item = new Sword();
                    break;
                case "Scroll":
                    item = new Scroll();
                    break;
                default:
                    System.out.println("Unknown activity: " + type);
                    break;
            }
            itemBeingParsed = item;
            displayableBeingParsed.addDisplayable(itemBeingParsed);
            dis_object.add(new Item());
        }
        else if (qName.equalsIgnoreCase("Monster"))
        {
            monsterBeingParsed = new Monster();
            displayableBeingParsed.addDisplayable(monsterBeingParsed);
        }
        else if (qName.equalsIgnoreCase("Player"))
        {
            playerBeingParsed = new Player();
            displayableBeingParsed.addDisplayable(playerBeingParsed);
        }
        else if (qName.equalsIgnoreCase("ItemAction"))
        {
            itemactionBeingParsed = new ItemAction()
            dis_object.add();
        }
        else if (qName.equalsIgnoreCase("CreatureAction"))
        {
            dis_object.add(new Player());
        }
        else if (qName.equalsIgnoreCase("posX")) {
            bPosX = true;
        } else if (qName.equalsIgnoreCase("posY")) {
            bPosY = true;
        } else if (qName.equalsIgnoreCase("width")) {
            bwidth = true;
        } else if (qName.equalsIgnoreCase("height")) {
            bheight = true;
        } else if (qName.equalsIgnoreCase("visible")) {
            bvisible = true;
        } else if (qName.equalsIgnoreCase("hp")) {
            bhp = true;
        } else if (qName.equalsIgnoreCase("maxhit")) {
            bmaxhit = true;
        }
        else if (qName.equalsIgnoreCase("hpMoves")) {
            bhpMoves = true;
        }
        else if (qName.equalsIgnoreCase("IntValue")) {
            bIntValue = true;
        }
        else
        {
            System.out.println("Unknown qname: " + qName);
        }
        data = new StringBuilder();
    }

    @Override
    public void endElement(String uri, String localName, String qName) throws SAXException {
        Displayable display;
        if (bPosX)
        {
            display = (Displayable) displayableBeingParsed;
            display.setPosX(Integer.parseInt(data.toString()));
            bPosX = false;
        } else if (bPosY) {
            display = (Displayable) displayableBeingParsed;
            display.setPosY(Integer.parseInt(data.toString()));
            bPosY = false;
        } else if (bwidth) {
            display = (Displayable) displayableBeingParsed;
            display.setWidth(Integer.parseInt(data.toString()));
            bwidth = false;
        } else if (bvisible) {
            display = (Displayable) displayableBeingParsed;
            display.setVisible(Integer.parseInt(data.toString()));
            bvisible = false;
        }
        else if (bInvisible) {
            display = (Displayable) displayableBeingParsed;
            display.setInvisible(Integer.parseInt(data.toString()));
            bInvisible = false;
        }
        else if (btype) {
            display = (Displayable) displayableBeingParsed;
            display.setType(Integer.parseInt(data.toString()));
            btype = false;
        }
        else if (bIntValue) {
            display = (Displayable) displayableBeingParsed;
            display.setIntValue(Integer.parseInt(data.toString()));
            bIntValue = false;
        }
        else if (bheight) {
            display = (Displayable) displayableBeingParsed;
            display.setHeight((Integer.parseInt(data.toString()));
            bheight = false;
        }
        else if (bhp) {
            display = (Displayable) displayableBeingParsed;
            display.setHp(Integer.parseInt(data.toString()));
            bhp = false;
        }
        else if (bhpMoves) {
            display = (Displayable) displayableBeingParsed;
            display.setHpMove(Integer.parseInt(data.toString()));
            bhpMoves = false;
        }
        else if (bmaxhit) {
            display = (Displayable) displayableBeingParsed;
            display.setMaxHit((Integer.parseInt(data.toString()));
            bmaxhit = false;
        }
        else if (qName.equalsIgnoreCase("Room")) {
            roomBeingParsed = null;
        } else if (qName.equalsIgnoreCase("Passage")) {
            passageBeingParsed = null;
        }
        else if (qName.equalsIgnoreCase("Item")) {
            itemBeingParsed = null;
        } else if (qName.equalsIgnoreCase("Monster")) {
            monsterBeingParsed = null;
        }
    }

    private void addDisplayable(Displayable _dis_object) {
        dis_object.add(_dis_object);
    }

    @Override
    public void characters(char ch[], int start, int length) throws SAXException {
        data.append(new String(ch, start, length));
        if (DEBUG > 1) {
            System.out.println(CLASSID + ".characters: " + new String(ch, start, length));
            System.out.flush();
        }
    }

    @Override
    public String toString() {
        String str = "DungeonXMLHandler\n";
        for (Room room: rooms) {
            str += room.toString() + "\n";
        }
        str += "   bPosX: " + bPosX + "\n";
        str += "   bPosY: " + bPosY + "\n";
        str += "   bwidth: " + bwidth + "\n";
        str += "   bheight: " + bheight + "\n";
        for (Monster monster: monsters) {
            str += monster.toString() + "\n";
        }
        str += "   bvisible: " + bvisible + "\n";
        str += "   bPosX: " + bPosX + "\n";
        str += "   bPosY: " + bPosY + "\n";
        str += "   btype: " + btype + "\n";
        str += "   bhp: " + bhp + "\n";
        str += "   bmaxhit: " + bmaxhit + "\n";
        for (Player player: players) {
            str += player.toString() + "\n";
        }
        str += "   bvisible: " + bvisible + "\n";
        str += "   bPosX: " + bPosX + "\n";
        str += "   bPosY: " + bPosY + "\n";
        str += "   bhp: " + bhp + "\n";
        str += "   bmaxhit: " + bmaxhit + "\n";
        str += "   bhpMoves: " + bhpMoves + "\n";
        str += "   dungeonBeingParsed: " + dungeonBeingParsed.toString() + "\n";
        str += "   RoomBeingParsed: " + roomBeingParsed.toString() + "\n";
        str += "   PassageBeingParsed: " + passageBeingParsed.toString() + "\n";
        str += "   itemBeingParsed: " + itemBeingParsed.toString() + "\n";
        str += "   monsterBeingParsed: " + monsterBeingParsed.toString() + "\n";
        str += "   playerBeingParsed: " + playerBeingParsed.toString() + "\n";
        str += "   BeingParsed: " + monsterBeingParsed.toString() + "\n";
        return str;
    }
}
